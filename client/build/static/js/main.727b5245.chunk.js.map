{"version":3,"sources":["components/navbar.js","components/Pagination.js","Container.js","components/ColorCard/ColorCard.js","Column.js","components/SideBar.js","components/colorswatch.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","className","bg","variant","Brand","href","alt","src","width","height","Item","inline","type","placeholder","Pagination","colorsPerPage","totalColors","paginate","pageNumbers","i","Math","ceil","push","map","number","key","onClick","Container","props","fluid","children","ColorCard","colors","loading","useState","show","setShow","handleClose","handleShow","hex","console","log","style","justifyContent","color","backgroundColor","Header","onHide","closeButton","Title","Footer","Column","size","split","join","SideBar","setColors","setColor","useEffect","a","axios","get","res","data","fetchColors","lenColors","length","index","floor","random","pickedColor","ColorSwatch","setLoading","currentPage","setCurrentPage","indexOfLastColor","indexOfFirstColor","currentColors","slice","pageNumber","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.727b5245.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Nav from \"react-bootstrap/Nav\";\n\n\nconst SearchBar = () => {\n    return(\n    <Navbar className=\"justify-content-between\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n        <img\n            alt=\"\"\n            src=\"/logo-symbol.svg\"\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n        />\n        </Navbar.Brand>\n        <Nav.Item>\n            <Form inline>\n                <FormControl type=\"text\" placeholder=\"Search\"  />\n            </Form>\n        </Nav.Item>\n    </Navbar>\n            \n        \n    )\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst Pagination = ({ colorsPerPage, totalColors, paginate }) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalColors / colorsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    \n      <a className='pagination'>\n        {pageNumbers.map(number => (\n          <a key={number} className='page-item'>\n            <a onClick={() => paginate(number)} href='!#' className='page-link'>\n              {number}\n            </a>\n          </a>\n        ))}\n      </a>\n    \n  );\n};\n\nexport default Pagination;","import React from \"react\";\n\nconst Container = props =>\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Container;\n","import React, {useState} from \"react\";\nimport \"./ColorCard.css\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"../../Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\n\n\nconst ColorCard = ({colors, loading}) => {\n    const[show, setShow] = useState(false);\n    \n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    \n    const hex = (colors)  => {\n      console.log(colors);\n\n    };\n    \n\n    if(loading){\n      return <h2>Loading....</h2>\n    }\n    \n    \n\n    return (\n      <div>\n      <Container>\n        <Row style={{justifyContent:'center'}}>\n          \n              {colors.map(color=>(\n                   \n                <Card onClick={hex} onClick={handleShow} style={{backgroundColor:color.hex}} >\n                  <Card.Header style={{backgroundColor: \"#FFFFFF\" }}>{color.hex}</Card.Header>\n                </Card>\n                \n              ))}\n          \n        </Row>\n      </Container>\n      \n      \n      {colors.map(color=>(\n      \n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>{color.color}</Modal.Title>\n          </Modal.Header>\n          <Card  style={{backgroundColor:color.hex}}></Card>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      ))}\n        \n        </div>\n    );\n    \n};\n\nexport default ColorCard;","import React from \"react\";\n\nconst Column = props => {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Column;","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport '../App.css';\n\nconst SideBar = () => {\n    const[show, setShow] = useState(false);\n    \n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const [colors, setColors, setColor] = useState([]);\n    \n    useEffect(() => {\n        const fetchColors = async () => {\n          \n          const res = await axios.get('api/colors');\n          setColors(res.data);\n          \n        };\n        \n        fetchColors();\n    }, []);\n    const lenColors = colors.length;\n    \n\n    const changeColor = () => {\n        const index = Math.floor(Math.random() * lenColors);\n        const pickedColor = colors[index];\n        setColor(pickedColor);\n\n    };\n\n  return (\n    \n            <div style={{backgroundColor: 'grey'}}>\n            <Button variant=\"primary\" className='randomColorButton' onClick={console.log()} onClick={changeColor} onClick={handleShow}>Random Color</Button>\n            \n\n                <Modal show={show} onHide={handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{}</Modal.Title>\n                    </Modal.Header>\n                            <Card  style={{}}></Card>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n           \n  );\n};\n\nexport default SideBar","import React, { useState, useEffect }  from 'react';\nimport Pagination from './Pagination'\nimport axios from 'axios';\nimport ColorCard from \"./ColorCard\";\nimport Container from '../Container';\nimport Row from 'react-bootstrap/Row';\nimport Column from '../Column';\nimport SideBar from './SideBar';\nimport '../App.css';\n\n\n\nconst ColorSwatch = () => {\n    const [colors, setColors] = useState([])\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [colorsPerPage] = useState(104)\n\n    \n    useEffect(() => {\n        const fetchColors = async () => {\n          setLoading(true);\n          const res = await axios.get('api/colors');\n          setColors(res.data);\n          setLoading(false);\n        };\n        \n        fetchColors();\n    }, []);\n\n    \n    // Get current colors\n    const indexOfLastColor = currentPage * colorsPerPage;\n    const indexOfFirstColor = indexOfLastColor - colorsPerPage;\n    const currentColors = colors.slice(indexOfFirstColor, indexOfLastColor);\n\n    // Change page\n    const paginate = pageNumber => setCurrentPage(pageNumber);    \n    \n    \n        return (\n           <div> \n            \n            <Container  >\n            \n           \n                <Row className='randomNumber'>\n                    <Column  style={{backgroundColor:'grey'}} size=\"md-3 sm-6\">\n                        <SideBar/>\n                    </Column>\n                </Row>\n                \n                <Row style={{justifyContent:'right'}}>\n                    <ColorCard\n                        colors = {currentColors}\n                        loading ={loading}>\n                    </ColorCard>\n                </Row>\n            </Container>\n            \n            <Container>\n            \n                <Row style={{justifyContent:'right'}}>\n                    <Pagination\n                        colorsPerPage={colorsPerPage}\n                        totalColors={colors.length}\n                        paginate={paginate}\n                    > </Pagination>\n                </Row>\n            \n        </Container>\n        </div>     \n        );\n}\n\n\nexport default ColorSwatch;\n","import React from 'react';\nimport SearchBar from './components/navbar';\nimport ColorSwatch from './components/colorswatch';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar/>  \n      <ColorSwatch/>\n    </div>\n      \n  )  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}