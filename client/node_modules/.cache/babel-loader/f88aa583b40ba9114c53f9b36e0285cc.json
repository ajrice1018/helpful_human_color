{"ast":null,"code":"var _jsxFileName = \"/Users/andrewrice/Desktop/helpful_human_color/client/src/components/colorswatch.js\";\nimport React, { Component } from 'react';\nimport Container from \"../Container\";\nimport ColorCard from \".//ColorCard\";\nimport Row from \"../Row\";\nimport Column from \"../Column\";\nimport Wrapper from \"./Wrapper\";\n\nclass ColorSwatch extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.getColors();\n  }\n\n  getColors() {\n    fetch('/api/colors', {\n      method: 'GET'\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        colors: data\n      });\n    }).catch(err => {\n      console.log('error' + err);\n    });\n  } // throw new Error(\"Bad Response from server\")\n  // console.log('caught error!', err)\n\n\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, this.state.colors.map(color => React.createElement(Column, {\n      size: \"md-3 sm-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(ColorCard, {\n      color: this.color,\n      hex: this.hex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default ColorSwatch;","map":{"version":3,"sources":["/Users/andrewrice/Desktop/helpful_human_color/client/src/components/colorswatch.js"],"names":["React","Component","Container","ColorCard","Row","Column","Wrapper","ColorSwatch","state","componentDidMount","getColors","fetch","method","then","response","json","data","setState","colors","catch","err","console","log","render","map","color","hex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,MAAMC,WAAN,SAA0BN,SAA1B,CAAmC;AAAA;AAAA;AAAA,SAC/BO,KAD+B,GACzB,EADyB;AAAA;;AAK/BC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,SAAL;AACH;;AAEDA,EAAAA,SAAS,GAAE;AACPC,IAAAA,KAAK,CAAC,aAAD,EAAe;AAChBC,MAAAA,MAAM,EAAE;AADQ,KAAf,CAAL,CAEGC,IAFH,CAEQC,QAAQ,IAAG;AAAE,aAAOA,QAAQ,CAACC,IAAT,EAAP;AAAuB,KAF5C,EAGCF,IAHD,CAGMG,IAAI,IAAG;AACT,WAAKC,QAAL,CAAc;AACVC,QAAAA,MAAM,EAAEF;AADE,OAAd;AAIH,KARD,EAQGG,KARH,CAQSC,GAAG,IAAG;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAUF,GAAtB;AACH,KAVD;AAWH,GArB8B,CAsB/B;AACA;;;AACAG,EAAAA,MAAM,GAAE;AACJ,WACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKf,KAAL,CAAWU,MAAX,CAAkBM,GAAlB,CAAsBC,KAAK,IAC5B,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,KAAKA,KADhB;AAEI,MAAA,GAAG,EAAE,KAAKC,GAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADC,CADL,CADJ,CADJ,CADJ;AAgBH;;AAzC8B;;AA4CnC,eAAenB,WAAf","sourcesContent":["import React, { Component }  from 'react';\nimport Container from \"../Container\";\nimport ColorCard from \".//ColorCard\";\nimport Row from \"../Row\";\nimport Column from \"../Column\";\nimport Wrapper from \"./Wrapper\";\n\n\nclass ColorSwatch extends Component{\n    state={\n        \n    };\n\n    componentDidMount(){\n        this.getColors();\n    }\n\n    getColors(){\n        fetch('/api/colors',{\n            method: 'GET'\n        }).then(response =>{ return response.json()})\n        .then(data =>{\n            this.setState({\n                colors: data\n            })\n            \n        }).catch(err =>{\n            console.log('error' + err)\n        })\n    }\n    // throw new Error(\"Bad Response from server\")\n    // console.log('caught error!', err)\n    render(){\n        return (\n            <Wrapper>\n                <Container>\n                    <Row>\n                        {this.state.colors.map(color => (\n                        <Column size=\"md-3 sm-6\">\n                        <ColorCard\n                            color={this.color}\n                            hex={this.hex}\n                            />\n                        </Column>\n                        ))}\n                    </Row>\n                </Container>\n            </Wrapper>\n        )\n    }\n}\n\nexport default ColorSwatch;\n"]},"metadata":{},"sourceType":"module"}