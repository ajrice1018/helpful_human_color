{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _querySelectorAll = _interopRequireDefault(require(\"dom-helpers/query/querySelectorAll\"));\n\nvar _useMergedRefs = _interopRequireDefault(require(\"@restart/hooks/useMergedRefs\"));\n\nvar _SelectableContext = _interopRequireWildcard(require(\"./SelectableContext\"));\n\nvar _NavContext = _interopRequireDefault(require(\"./NavContext\"));\n\nvar _TabContext = _interopRequireDefault(require(\"./TabContext\"));\n\nvar noop = function noop() {};\n\nvar defaultProps = {\n  role: 'tablist'\n};\n\nvar AbstractNav = _react.default.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'ul' : _ref$as,\n      onSelect = _ref.onSelect,\n      activeKey = _ref.activeKey,\n      role = _ref.role,\n      onKeyDown = _ref.onKeyDown,\n      props = (0, _objectWithoutPropertiesLoose2.default)(_ref, [\"as\", \"onSelect\", \"activeKey\", \"role\", \"onKeyDown\"]);\n  var parentOnSelect = (0, _react.useContext)(_SelectableContext.default);\n  var tabContext = (0, _react.useContext)(_TabContext.default);\n  var getControlledId, getControllerId;\n\n  if (tabContext) {\n    activeKey = tabContext.activeKey;\n    getControlledId = tabContext.getControlledId;\n    getControllerId = tabContext.getControllerId;\n  }\n\n  var _useState = (0, _react.useState)(false),\n      needsRefocus = _useState[0],\n      setRefocus = _useState[1];\n\n  var listNode = (0, _react.useRef)(null);\n\n  var getNextActiveChild = function getNextActiveChild(offset) {\n    if (!listNode.current) return null;\n    var items = (0, _querySelectorAll.default)(listNode.current, '[data-rb-event-key]:not(.disabled)');\n    var activeChild = listNode.current.querySelector('.active');\n    var index = items.indexOf(activeChild);\n    if (index === -1) return null;\n    var nextIndex = index + offset;\n    if (nextIndex >= items.length) nextIndex = 0;\n    if (nextIndex < 0) nextIndex = items.length - 1;\n    return items[nextIndex];\n  };\n\n  var handleSelect = function handleSelect(key, event) {\n    if (key == null) return;\n    if (onSelect) onSelect(key, event);\n    if (parentOnSelect) parentOnSelect(key, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (onKeyDown) onKeyDown(event);\n    var nextActiveChild;\n\n    switch (event.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        nextActiveChild = getNextActiveChild(-1);\n        break;\n\n      case 'ArrowRight':\n      case 'ArrowDown':\n        nextActiveChild = getNextActiveChild(1);\n        break;\n\n      default:\n        return;\n    }\n\n    if (!nextActiveChild) return;\n    event.preventDefault();\n    handleSelect(nextActiveChild.dataset.rbEventKey, event);\n    setRefocus(true);\n  };\n\n  (0, _react.useEffect)(function () {\n    if (listNode.current && needsRefocus) {\n      var activeChild = listNode.current.querySelector('[data-rb-event-key].active');\n      if (activeChild) activeChild.focus();\n    }\n  }, [listNode, needsRefocus]);\n  var mergedRef = (0, _useMergedRefs.default)(ref, listNode);\n  return _react.default.createElement(_SelectableContext.default.Provider, {\n    value: handleSelect\n  }, _react.default.createElement(_NavContext.default.Provider, {\n    value: {\n      role: role,\n      // used by NavLink to determine it's role\n      activeKey: (0, _SelectableContext.makeEventKey)(activeKey),\n      getControlledId: getControlledId || noop,\n      getControllerId: getControllerId || noop\n    }\n  }, _react.default.createElement(Component, (0, _extends2.default)({}, props, {\n    onKeyDown: handleKeyDown,\n    ref: mergedRef\n  }))));\n});\n\nAbstractNav.defaultProps = defaultProps;\nvar _default = AbstractNav;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}